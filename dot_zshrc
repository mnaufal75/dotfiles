# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"
# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git rvm virtualenv)

source $ZSH/oh-my-zsh.sh
source /etc/profile.d/rvm.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

pkubetoken() {
  gcloud container clusters get-credentials k8s-production-2 --region asia-southeast1 --project kubernetes-prod-94cb
  gcloud container clusters get-credentials k8s-production-3 --region asia-southeast1 --project kubernetes-prod-94cb
}
pkctx() {
  if [[ $1 =~ ^ashmore($|-) ]]; then
    qusectx gke_ashmore-production-7d4s_asia-southeast2_k8s-production-1
    qusens bib-ashmore
  elif [[ $1 =~ ^bib($|-) ]]; then
    qusectx ctx-kubernetes-dc3
    qusens bib
  elif [[ $1 =~ ^bibd($|-) ]]; then
    qusectx ctx-kubernetes-cyber2
    qusens bib
  elif [[ $1 =~ ^mothership($|-) ]]; then
    qusectx gke_kubernetes-prod-94cb_asia-southeast1_k8s-production-3
    qusens mothership
  else
    qusectx gke_kubernetes-prod-94cb_asia-southeast1_k8s-production-2
    if [[ $1 =~ ^rexa($|-) ]]; then
      qusens rexa
    elif [[ $1 =~ ^golden-way($|-) ]]; then
      qusens golden-way
    elif [[ $1 =~ ^telolet($|-) ]]; then
      qusens telolet
    elif [[ $1 =~ ^bmoney-api($|-) ]]; then
      qusens bmoney-api
    elif [[ $1 =~ ^zeny($|-) ]]; then
      qusens zeny
    elif [[ $1 =~ ^payments($|-) ]]; then
      qusens payments
    elif [[ $1 =~ ^ntf48($|-) ]]; then
      qusens ntf48
    elif [[ $1 =~ ^voucher($|-) ]]; then
      qusens the-voucher-awakens
    elif [[ $1 =~ ^accounts($|-) ]]; then
      qusens accounts
    elif [[ $1 =~ ^mitra($|-) ]]; then
      qusens mitra
    fi
  fi
}
pkxec() {
  qxec $(pkpod $1 | grep $1 | head -1 | awk '{print $1}')
}
pkpod() {
  pkctx $1
  qpod
}
ckctx() {
  if [[ $1 =~ ^ashmore($|-) ]]; then
    qusectx gke_ashmore-preproduction-flvv_asia-southeast2_k8s-preproduction-1
    qusens bib-ashmore
  elif [[ $1 =~ ^mothership($|-) ]]; then
    qusectx gke_kubernetes-preprod-0d59_asia-southeast1_k8s-preproduction-3
    qusens mothership
  elif [[ $1 =~ ^bib($|-) ]]; then
  # need vpn?
	qusectx gke_bukainvestasi-preprod-yxjm_asia-southeast2_k8s-bib-preproduction-1
	qusens bib
  else
    qusectx gke_kubernetes-preprod-0d59_asia-southeast1_k8s-preproduction-2
    if [[ $1 =~ ^rexa($|-) ]]; then
      qusens rexa
    elif [[ $1 =~ ^golden-way($|-) ]]; then
      qusens golden-way
    elif [[ $1 =~ ^bmoney-api($|-) ]]; then
      qusens bmoney-api
    elif [[ $1 =~ ^zeny($|-) ]]; then
      qusens zeny
    elif [[ $1 =~ ^payments($|-) ]]; then
      qusens payments
    elif [[ $1 =~ ^ntf48($|-) ]]; then
      qusens ntf48
    elif [[ $1 =~ ^(the-)?voucher(-awakens)?($|-) ]]; then
      qusens the-voucher-awakens
    elif [[ $1 =~ ^accounts($|-) ]]; then
      qusens accounts
    elif [[ $1 =~ ^mitra($|-) ]]; then
      qusens mitra
    elif [[ $1 =~ ^stock($|-) ]]; then
      qusens stock
    fi
  fi
}
ckxec() {
  qxec $(ckpod $1 | grep $1 | head -1 | awk '{print $1}')
}
ckpod() {
  ckctx $1
  qpod
}
ckubetoken() {
  gcloud container clusters get-credentials k8s-preproduction-2 --region asia-southeast1 --project kubernetes-preprod-0d59
  gcloud container clusters get-credentials k8s-preproduction-3 --region asia-southeast1 --project kubernetes-preprod-0d59
  gcloud container clusters get-credentials k8s-bib-preproduction-1 --region asia-southeast2 --project bukainvestasi-preprod-yxjm
}
qusectx() {
  kubectl config use-context $1
}
qusens() {
  kubectl config set-context --current --namespace=$1
}
qxec() {
  kubectl exec -ti $1 sh
}
qlog() {
  kubectl logs -f $1
}
qns() {
  kubectl get namespaces
}
qcfg() {
  kubectl get configmaps
}
qpod() {
  kubectl get pods
}
qpoddescribe() {
  kubectl describe pods $1
}
qpoddel() {
  kubectl delete pods $1
}
qrestart() {
  kubectl patch deployment $1 -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"restart\":\"$(date)\"}}}}}"
}
qdep() {
  kubectl get deployments
}
qdepdel() {
  kubectl delete deployments $1
}
qcron() {
  kubectl get cronjob
}
qcrondel() {
  kubectl delete cronjob $1
}
qautoscale() {
  kubectl scale deploy $1 --replicas=$2
}
qnano() {
  KUBE_EDITOR="nano" kubectl edit $1 "$2"
}
qup() {
  kubectl cp $1 "$2:$3"
}
qdown() {
  if [ -z "$3" ]
  then
    kubectl cp "$1:$2" ~/kube_download/$2
  else
    kubectl cp "$1:$2" $3
  fi
}

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
